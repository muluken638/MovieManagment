
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ButtonStatus
 * 
 */
export type ButtonStatus = $Result.DefaultSelection<Prisma.$ButtonStatusPayload>
/**
 * Model Movie
 * 
 */
export type Movie = $Result.DefaultSelection<Prisma.$MoviePayload>
/**
 * Model NewData
 * 
 */
export type NewData = $Result.DefaultSelection<Prisma.$NewDataPayload>
/**
 * Model UserRegistration
 * 
 */
export type UserRegistration = $Result.DefaultSelection<Prisma.$UserRegistrationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Genre: {
  Romance: 'Romance',
  Action: 'Action',
  Horror: 'Horror',
  Comedy: 'Comedy',
  Drama: 'Drama',
  SciFi: 'SciFi',
  Documentary: 'Documentary',
  Animation: 'Animation',
  Adventure: 'Adventure',
  Thriller: 'Thriller',
  Fantasy: 'Fantasy',
  Crime: 'Crime',
  War: 'War',
  History: 'History',
  Music: 'Music',
  Mystery: 'Mystery',
  Family: 'Family',
  Biography: 'Biography',
  Sport: 'Sport',
  Western: 'Western'
};

export type Genre = (typeof Genre)[keyof typeof Genre]

}

export type Genre = $Enums.Genre

export const Genre: typeof $Enums.Genre

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ButtonStatuses
 * const buttonStatuses = await prisma.buttonStatus.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ButtonStatuses
   * const buttonStatuses = await prisma.buttonStatus.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.buttonStatus`: Exposes CRUD operations for the **ButtonStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ButtonStatuses
    * const buttonStatuses = await prisma.buttonStatus.findMany()
    * ```
    */
  get buttonStatus(): Prisma.ButtonStatusDelegate<ExtArgs>;

  /**
   * `prisma.movie`: Exposes CRUD operations for the **Movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): Prisma.MovieDelegate<ExtArgs>;

  /**
   * `prisma.newData`: Exposes CRUD operations for the **NewData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewData
    * const newData = await prisma.newData.findMany()
    * ```
    */
  get newData(): Prisma.NewDataDelegate<ExtArgs>;

  /**
   * `prisma.userRegistration`: Exposes CRUD operations for the **UserRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRegistrations
    * const userRegistrations = await prisma.userRegistration.findMany()
    * ```
    */
  get userRegistration(): Prisma.UserRegistrationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ButtonStatus: 'ButtonStatus',
    Movie: 'Movie',
    NewData: 'NewData',
    UserRegistration: 'UserRegistration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'buttonStatus' | 'movie' | 'newData' | 'userRegistration'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      ButtonStatus: {
        payload: Prisma.$ButtonStatusPayload<ExtArgs>
        fields: Prisma.ButtonStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ButtonStatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ButtonStatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          findFirst: {
            args: Prisma.ButtonStatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ButtonStatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          findMany: {
            args: Prisma.ButtonStatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>[]
          }
          create: {
            args: Prisma.ButtonStatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          createMany: {
            args: Prisma.ButtonStatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ButtonStatusCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>[]
          }
          delete: {
            args: Prisma.ButtonStatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          update: {
            args: Prisma.ButtonStatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          deleteMany: {
            args: Prisma.ButtonStatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ButtonStatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ButtonStatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ButtonStatusPayload>
          }
          aggregate: {
            args: Prisma.ButtonStatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateButtonStatus>
          }
          groupBy: {
            args: Prisma.ButtonStatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ButtonStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ButtonStatusCountArgs<ExtArgs>,
            result: $Utils.Optional<ButtonStatusCountAggregateOutputType> | number
          }
        }
      }
      Movie: {
        payload: Prisma.$MoviePayload<ExtArgs>
        fields: Prisma.MovieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          findFirst: {
            args: Prisma.MovieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          findMany: {
            args: Prisma.MovieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>[]
          }
          create: {
            args: Prisma.MovieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          createMany: {
            args: Prisma.MovieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>[]
          }
          delete: {
            args: Prisma.MovieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          update: {
            args: Prisma.MovieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          deleteMany: {
            args: Prisma.MovieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MovieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MovieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          aggregate: {
            args: Prisma.MovieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMovie>
          }
          groupBy: {
            args: Prisma.MovieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MovieGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieCountArgs<ExtArgs>,
            result: $Utils.Optional<MovieCountAggregateOutputType> | number
          }
        }
      }
      NewData: {
        payload: Prisma.$NewDataPayload<ExtArgs>
        fields: Prisma.NewDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          findFirst: {
            args: Prisma.NewDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          findMany: {
            args: Prisma.NewDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>[]
          }
          create: {
            args: Prisma.NewDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          createMany: {
            args: Prisma.NewDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewDataCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>[]
          }
          delete: {
            args: Prisma.NewDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          update: {
            args: Prisma.NewDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          deleteMany: {
            args: Prisma.NewDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NewDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NewDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewDataPayload>
          }
          aggregate: {
            args: Prisma.NewDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNewData>
          }
          groupBy: {
            args: Prisma.NewDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NewDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewDataCountArgs<ExtArgs>,
            result: $Utils.Optional<NewDataCountAggregateOutputType> | number
          }
        }
      }
      UserRegistration: {
        payload: Prisma.$UserRegistrationPayload<ExtArgs>
        fields: Prisma.UserRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRegistrationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRegistrationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          findFirst: {
            args: Prisma.UserRegistrationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRegistrationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          findMany: {
            args: Prisma.UserRegistrationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>[]
          }
          create: {
            args: Prisma.UserRegistrationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          createMany: {
            args: Prisma.UserRegistrationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRegistrationCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>[]
          }
          delete: {
            args: Prisma.UserRegistrationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          update: {
            args: Prisma.UserRegistrationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.UserRegistrationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserRegistrationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserRegistrationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRegistrationPayload>
          }
          aggregate: {
            args: Prisma.UserRegistrationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserRegistration>
          }
          groupBy: {
            args: Prisma.UserRegistrationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRegistrationCountArgs<ExtArgs>,
            result: $Utils.Optional<UserRegistrationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ButtonStatus
   */

  export type AggregateButtonStatus = {
    _count: ButtonStatusCountAggregateOutputType | null
    _avg: ButtonStatusAvgAggregateOutputType | null
    _sum: ButtonStatusSumAggregateOutputType | null
    _min: ButtonStatusMinAggregateOutputType | null
    _max: ButtonStatusMaxAggregateOutputType | null
  }

  export type ButtonStatusAvgAggregateOutputType = {
    id: number | null
  }

  export type ButtonStatusSumAggregateOutputType = {
    id: number | null
  }

  export type ButtonStatusMinAggregateOutputType = {
    id: number | null
    status: boolean | null
  }

  export type ButtonStatusMaxAggregateOutputType = {
    id: number | null
    status: boolean | null
  }

  export type ButtonStatusCountAggregateOutputType = {
    id: number
    status: number
    _all: number
  }


  export type ButtonStatusAvgAggregateInputType = {
    id?: true
  }

  export type ButtonStatusSumAggregateInputType = {
    id?: true
  }

  export type ButtonStatusMinAggregateInputType = {
    id?: true
    status?: true
  }

  export type ButtonStatusMaxAggregateInputType = {
    id?: true
    status?: true
  }

  export type ButtonStatusCountAggregateInputType = {
    id?: true
    status?: true
    _all?: true
  }

  export type ButtonStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ButtonStatus to aggregate.
     */
    where?: ButtonStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ButtonStatuses to fetch.
     */
    orderBy?: ButtonStatusOrderByWithRelationInput | ButtonStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ButtonStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ButtonStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ButtonStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ButtonStatuses
    **/
    _count?: true | ButtonStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ButtonStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ButtonStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ButtonStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ButtonStatusMaxAggregateInputType
  }

  export type GetButtonStatusAggregateType<T extends ButtonStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateButtonStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateButtonStatus[P]>
      : GetScalarType<T[P], AggregateButtonStatus[P]>
  }




  export type ButtonStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ButtonStatusWhereInput
    orderBy?: ButtonStatusOrderByWithAggregationInput | ButtonStatusOrderByWithAggregationInput[]
    by: ButtonStatusScalarFieldEnum[] | ButtonStatusScalarFieldEnum
    having?: ButtonStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ButtonStatusCountAggregateInputType | true
    _avg?: ButtonStatusAvgAggregateInputType
    _sum?: ButtonStatusSumAggregateInputType
    _min?: ButtonStatusMinAggregateInputType
    _max?: ButtonStatusMaxAggregateInputType
  }

  export type ButtonStatusGroupByOutputType = {
    id: number
    status: boolean
    _count: ButtonStatusCountAggregateOutputType | null
    _avg: ButtonStatusAvgAggregateOutputType | null
    _sum: ButtonStatusSumAggregateOutputType | null
    _min: ButtonStatusMinAggregateOutputType | null
    _max: ButtonStatusMaxAggregateOutputType | null
  }

  type GetButtonStatusGroupByPayload<T extends ButtonStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ButtonStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ButtonStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ButtonStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ButtonStatusGroupByOutputType[P]>
        }
      >
    >


  export type ButtonStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
  }, ExtArgs["result"]["buttonStatus"]>

  export type ButtonStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
  }, ExtArgs["result"]["buttonStatus"]>

  export type ButtonStatusSelectScalar = {
    id?: boolean
    status?: boolean
  }


  export type $ButtonStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ButtonStatus"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: boolean
    }, ExtArgs["result"]["buttonStatus"]>
    composites: {}
  }

  type ButtonStatusGetPayload<S extends boolean | null | undefined | ButtonStatusDefaultArgs> = $Result.GetResult<Prisma.$ButtonStatusPayload, S>

  type ButtonStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ButtonStatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ButtonStatusCountAggregateInputType | true
    }

  export interface ButtonStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ButtonStatus'], meta: { name: 'ButtonStatus' } }
    /**
     * Find zero or one ButtonStatus that matches the filter.
     * @param {ButtonStatusFindUniqueArgs} args - Arguments to find a ButtonStatus
     * @example
     * // Get one ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ButtonStatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusFindUniqueArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ButtonStatus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ButtonStatusFindUniqueOrThrowArgs} args - Arguments to find a ButtonStatus
     * @example
     * // Get one ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ButtonStatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ButtonStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusFindFirstArgs} args - Arguments to find a ButtonStatus
     * @example
     * // Get one ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ButtonStatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusFindFirstArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ButtonStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusFindFirstOrThrowArgs} args - Arguments to find a ButtonStatus
     * @example
     * // Get one ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ButtonStatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ButtonStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ButtonStatuses
     * const buttonStatuses = await prisma.buttonStatus.findMany()
     * 
     * // Get first 10 ButtonStatuses
     * const buttonStatuses = await prisma.buttonStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buttonStatusWithIdOnly = await prisma.buttonStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ButtonStatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ButtonStatus.
     * @param {ButtonStatusCreateArgs} args - Arguments to create a ButtonStatus.
     * @example
     * // Create one ButtonStatus
     * const ButtonStatus = await prisma.buttonStatus.create({
     *   data: {
     *     // ... data to create a ButtonStatus
     *   }
     * })
     * 
    **/
    create<T extends ButtonStatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusCreateArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ButtonStatuses.
     * @param {ButtonStatusCreateManyArgs} args - Arguments to create many ButtonStatuses.
     * @example
     * // Create many ButtonStatuses
     * const buttonStatus = await prisma.buttonStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ButtonStatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ButtonStatuses and returns the data saved in the database.
     * @param {ButtonStatusCreateManyAndReturnArgs} args - Arguments to create many ButtonStatuses.
     * @example
     * // Create many ButtonStatuses
     * const buttonStatus = await prisma.buttonStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ButtonStatuses and only return the `id`
     * const buttonStatusWithIdOnly = await prisma.buttonStatus.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ButtonStatusCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ButtonStatus.
     * @param {ButtonStatusDeleteArgs} args - Arguments to delete one ButtonStatus.
     * @example
     * // Delete one ButtonStatus
     * const ButtonStatus = await prisma.buttonStatus.delete({
     *   where: {
     *     // ... filter to delete one ButtonStatus
     *   }
     * })
     * 
    **/
    delete<T extends ButtonStatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusDeleteArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ButtonStatus.
     * @param {ButtonStatusUpdateArgs} args - Arguments to update one ButtonStatus.
     * @example
     * // Update one ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ButtonStatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusUpdateArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ButtonStatuses.
     * @param {ButtonStatusDeleteManyArgs} args - Arguments to filter ButtonStatuses to delete.
     * @example
     * // Delete a few ButtonStatuses
     * const { count } = await prisma.buttonStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ButtonStatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ButtonStatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ButtonStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ButtonStatuses
     * const buttonStatus = await prisma.buttonStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ButtonStatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ButtonStatus.
     * @param {ButtonStatusUpsertArgs} args - Arguments to update or create a ButtonStatus.
     * @example
     * // Update or create a ButtonStatus
     * const buttonStatus = await prisma.buttonStatus.upsert({
     *   create: {
     *     // ... data to create a ButtonStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ButtonStatus we want to update
     *   }
     * })
    **/
    upsert<T extends ButtonStatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ButtonStatusUpsertArgs<ExtArgs>>
    ): Prisma__ButtonStatusClient<$Result.GetResult<Prisma.$ButtonStatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ButtonStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusCountArgs} args - Arguments to filter ButtonStatuses to count.
     * @example
     * // Count the number of ButtonStatuses
     * const count = await prisma.buttonStatus.count({
     *   where: {
     *     // ... the filter for the ButtonStatuses we want to count
     *   }
     * })
    **/
    count<T extends ButtonStatusCountArgs>(
      args?: Subset<T, ButtonStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ButtonStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ButtonStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ButtonStatusAggregateArgs>(args: Subset<T, ButtonStatusAggregateArgs>): Prisma.PrismaPromise<GetButtonStatusAggregateType<T>>

    /**
     * Group by ButtonStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButtonStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ButtonStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ButtonStatusGroupByArgs['orderBy'] }
        : { orderBy?: ButtonStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ButtonStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetButtonStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ButtonStatus model
   */
  readonly fields: ButtonStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ButtonStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ButtonStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ButtonStatus model
   */ 
  interface ButtonStatusFieldRefs {
    readonly id: FieldRef<"ButtonStatus", 'Int'>
    readonly status: FieldRef<"ButtonStatus", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ButtonStatus findUnique
   */
  export type ButtonStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter, which ButtonStatus to fetch.
     */
    where: ButtonStatusWhereUniqueInput
  }

  /**
   * ButtonStatus findUniqueOrThrow
   */
  export type ButtonStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter, which ButtonStatus to fetch.
     */
    where: ButtonStatusWhereUniqueInput
  }

  /**
   * ButtonStatus findFirst
   */
  export type ButtonStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter, which ButtonStatus to fetch.
     */
    where?: ButtonStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ButtonStatuses to fetch.
     */
    orderBy?: ButtonStatusOrderByWithRelationInput | ButtonStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ButtonStatuses.
     */
    cursor?: ButtonStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ButtonStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ButtonStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ButtonStatuses.
     */
    distinct?: ButtonStatusScalarFieldEnum | ButtonStatusScalarFieldEnum[]
  }

  /**
   * ButtonStatus findFirstOrThrow
   */
  export type ButtonStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter, which ButtonStatus to fetch.
     */
    where?: ButtonStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ButtonStatuses to fetch.
     */
    orderBy?: ButtonStatusOrderByWithRelationInput | ButtonStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ButtonStatuses.
     */
    cursor?: ButtonStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ButtonStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ButtonStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ButtonStatuses.
     */
    distinct?: ButtonStatusScalarFieldEnum | ButtonStatusScalarFieldEnum[]
  }

  /**
   * ButtonStatus findMany
   */
  export type ButtonStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter, which ButtonStatuses to fetch.
     */
    where?: ButtonStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ButtonStatuses to fetch.
     */
    orderBy?: ButtonStatusOrderByWithRelationInput | ButtonStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ButtonStatuses.
     */
    cursor?: ButtonStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ButtonStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ButtonStatuses.
     */
    skip?: number
    distinct?: ButtonStatusScalarFieldEnum | ButtonStatusScalarFieldEnum[]
  }

  /**
   * ButtonStatus create
   */
  export type ButtonStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * The data needed to create a ButtonStatus.
     */
    data?: XOR<ButtonStatusCreateInput, ButtonStatusUncheckedCreateInput>
  }

  /**
   * ButtonStatus createMany
   */
  export type ButtonStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ButtonStatuses.
     */
    data: ButtonStatusCreateManyInput | ButtonStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ButtonStatus createManyAndReturn
   */
  export type ButtonStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ButtonStatuses.
     */
    data: ButtonStatusCreateManyInput | ButtonStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ButtonStatus update
   */
  export type ButtonStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * The data needed to update a ButtonStatus.
     */
    data: XOR<ButtonStatusUpdateInput, ButtonStatusUncheckedUpdateInput>
    /**
     * Choose, which ButtonStatus to update.
     */
    where: ButtonStatusWhereUniqueInput
  }

  /**
   * ButtonStatus updateMany
   */
  export type ButtonStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ButtonStatuses.
     */
    data: XOR<ButtonStatusUpdateManyMutationInput, ButtonStatusUncheckedUpdateManyInput>
    /**
     * Filter which ButtonStatuses to update
     */
    where?: ButtonStatusWhereInput
  }

  /**
   * ButtonStatus upsert
   */
  export type ButtonStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * The filter to search for the ButtonStatus to update in case it exists.
     */
    where: ButtonStatusWhereUniqueInput
    /**
     * In case the ButtonStatus found by the `where` argument doesn't exist, create a new ButtonStatus with this data.
     */
    create: XOR<ButtonStatusCreateInput, ButtonStatusUncheckedCreateInput>
    /**
     * In case the ButtonStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ButtonStatusUpdateInput, ButtonStatusUncheckedUpdateInput>
  }

  /**
   * ButtonStatus delete
   */
  export type ButtonStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
    /**
     * Filter which ButtonStatus to delete.
     */
    where: ButtonStatusWhereUniqueInput
  }

  /**
   * ButtonStatus deleteMany
   */
  export type ButtonStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ButtonStatuses to delete
     */
    where?: ButtonStatusWhereInput
  }

  /**
   * ButtonStatus without action
   */
  export type ButtonStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ButtonStatus
     */
    select?: ButtonStatusSelect<ExtArgs> | null
  }


  /**
   * Model Movie
   */

  export type AggregateMovie = {
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  export type MovieAvgAggregateOutputType = {
    id: number | null
    releaseYear: number | null
    runtime: number | null
    rating: number | null
  }

  export type MovieSumAggregateOutputType = {
    id: number | null
    releaseYear: number | null
    runtime: number | null
    rating: number | null
  }

  export type MovieMinAggregateOutputType = {
    id: number | null
    title: string | null
    director: string | null
    releaseYear: number | null
    runtime: number | null
    genre: $Enums.Genre | null
    image: string | null
    rating: number | null
    plotSummary: string | null
    cast: string | null
  }

  export type MovieMaxAggregateOutputType = {
    id: number | null
    title: string | null
    director: string | null
    releaseYear: number | null
    runtime: number | null
    genre: $Enums.Genre | null
    image: string | null
    rating: number | null
    plotSummary: string | null
    cast: string | null
  }

  export type MovieCountAggregateOutputType = {
    id: number
    title: number
    director: number
    releaseYear: number
    runtime: number
    genre: number
    image: number
    rating: number
    plotSummary: number
    cast: number
    _all: number
  }


  export type MovieAvgAggregateInputType = {
    id?: true
    releaseYear?: true
    runtime?: true
    rating?: true
  }

  export type MovieSumAggregateInputType = {
    id?: true
    releaseYear?: true
    runtime?: true
    rating?: true
  }

  export type MovieMinAggregateInputType = {
    id?: true
    title?: true
    director?: true
    releaseYear?: true
    runtime?: true
    genre?: true
    image?: true
    rating?: true
    plotSummary?: true
    cast?: true
  }

  export type MovieMaxAggregateInputType = {
    id?: true
    title?: true
    director?: true
    releaseYear?: true
    runtime?: true
    genre?: true
    image?: true
    rating?: true
    plotSummary?: true
    cast?: true
  }

  export type MovieCountAggregateInputType = {
    id?: true
    title?: true
    director?: true
    releaseYear?: true
    runtime?: true
    genre?: true
    image?: true
    rating?: true
    plotSummary?: true
    cast?: true
    _all?: true
  }

  export type MovieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movie to aggregate.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movies
    **/
    _count?: true | MovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieMaxAggregateInputType
  }

  export type GetMovieAggregateType<T extends MovieAggregateArgs> = {
        [P in keyof T & keyof AggregateMovie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovie[P]>
      : GetScalarType<T[P], AggregateMovie[P]>
  }




  export type MovieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieWhereInput
    orderBy?: MovieOrderByWithAggregationInput | MovieOrderByWithAggregationInput[]
    by: MovieScalarFieldEnum[] | MovieScalarFieldEnum
    having?: MovieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCountAggregateInputType | true
    _avg?: MovieAvgAggregateInputType
    _sum?: MovieSumAggregateInputType
    _min?: MovieMinAggregateInputType
    _max?: MovieMaxAggregateInputType
  }

  export type MovieGroupByOutputType = {
    id: number
    title: string | null
    director: string | null
    releaseYear: number | null
    runtime: number | null
    genre: $Enums.Genre | null
    image: string | null
    rating: number | null
    plotSummary: string | null
    cast: string | null
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  type GetMovieGroupByPayload<T extends MovieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieGroupByOutputType[P]>
            : GetScalarType<T[P], MovieGroupByOutputType[P]>
        }
      >
    >


  export type MovieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    director?: boolean
    releaseYear?: boolean
    runtime?: boolean
    genre?: boolean
    image?: boolean
    rating?: boolean
    plotSummary?: boolean
    cast?: boolean
  }, ExtArgs["result"]["movie"]>

  export type MovieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    director?: boolean
    releaseYear?: boolean
    runtime?: boolean
    genre?: boolean
    image?: boolean
    rating?: boolean
    plotSummary?: boolean
    cast?: boolean
  }, ExtArgs["result"]["movie"]>

  export type MovieSelectScalar = {
    id?: boolean
    title?: boolean
    director?: boolean
    releaseYear?: boolean
    runtime?: boolean
    genre?: boolean
    image?: boolean
    rating?: boolean
    plotSummary?: boolean
    cast?: boolean
  }


  export type $MoviePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movie"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string | null
      director: string | null
      releaseYear: number | null
      runtime: number | null
      genre: $Enums.Genre | null
      image: string | null
      rating: number | null
      plotSummary: string | null
      cast: string | null
    }, ExtArgs["result"]["movie"]>
    composites: {}
  }

  type MovieGetPayload<S extends boolean | null | undefined | MovieDefaultArgs> = $Result.GetResult<Prisma.$MoviePayload, S>

  type MovieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCountAggregateInputType | true
    }

  export interface MovieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movie'], meta: { name: 'Movie' } }
    /**
     * Find zero or one Movie that matches the filter.
     * @param {MovieFindUniqueArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MovieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MovieFindUniqueArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Movie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieFindUniqueOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MovieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Movie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindFirstArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MovieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindFirstArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Movie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindFirstOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MovieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movie.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MovieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Movie.
     * @param {MovieCreateArgs} args - Arguments to create a Movie.
     * @example
     * // Create one Movie
     * const Movie = await prisma.movie.create({
     *   data: {
     *     // ... data to create a Movie
     *   }
     * })
     * 
    **/
    create<T extends MovieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MovieCreateArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Movies.
     * @param {MovieCreateManyArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MovieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movies and returns the data saved in the database.
     * @param {MovieCreateManyAndReturnArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movies and only return the `id`
     * const movieWithIdOnly = await prisma.movie.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MovieCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Movie.
     * @param {MovieDeleteArgs} args - Arguments to delete one Movie.
     * @example
     * // Delete one Movie
     * const Movie = await prisma.movie.delete({
     *   where: {
     *     // ... filter to delete one Movie
     *   }
     * })
     * 
    **/
    delete<T extends MovieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MovieDeleteArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Movie.
     * @param {MovieUpdateArgs} args - Arguments to update one Movie.
     * @example
     * // Update one Movie
     * const movie = await prisma.movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MovieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpdateArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Movies.
     * @param {MovieDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MovieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movie = await prisma.movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MovieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movie.
     * @param {MovieUpsertArgs} args - Arguments to update or create a Movie.
     * @example
     * // Update or create a Movie
     * const movie = await prisma.movie.upsert({
     *   create: {
     *     // ... data to create a Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movie we want to update
     *   }
     * })
    **/
    upsert<T extends MovieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpsertArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movie.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends MovieCountArgs>(
      args?: Subset<T, MovieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieAggregateArgs>(args: Subset<T, MovieAggregateArgs>): Prisma.PrismaPromise<GetMovieAggregateType<T>>

    /**
     * Group by Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieGroupByArgs['orderBy'] }
        : { orderBy?: MovieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movie model
   */
  readonly fields: MovieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Movie model
   */ 
  interface MovieFieldRefs {
    readonly id: FieldRef<"Movie", 'Int'>
    readonly title: FieldRef<"Movie", 'String'>
    readonly director: FieldRef<"Movie", 'String'>
    readonly releaseYear: FieldRef<"Movie", 'Int'>
    readonly runtime: FieldRef<"Movie", 'Int'>
    readonly genre: FieldRef<"Movie", 'Genre'>
    readonly image: FieldRef<"Movie", 'String'>
    readonly rating: FieldRef<"Movie", 'Float'>
    readonly plotSummary: FieldRef<"Movie", 'String'>
    readonly cast: FieldRef<"Movie", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Movie findUnique
   */
  export type MovieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie findUniqueOrThrow
   */
  export type MovieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie findFirst
   */
  export type MovieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie findFirstOrThrow
   */
  export type MovieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie findMany
   */
  export type MovieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie create
   */
  export type MovieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * The data needed to create a Movie.
     */
    data?: XOR<MovieCreateInput, MovieUncheckedCreateInput>
  }

  /**
   * Movie createMany
   */
  export type MovieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movies.
     */
    data: MovieCreateManyInput | MovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movie createManyAndReturn
   */
  export type MovieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Movies.
     */
    data: MovieCreateManyInput | MovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movie update
   */
  export type MovieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * The data needed to update a Movie.
     */
    data: XOR<MovieUpdateInput, MovieUncheckedUpdateInput>
    /**
     * Choose, which Movie to update.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie updateMany
   */
  export type MovieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movies.
     */
    data: XOR<MovieUpdateManyMutationInput, MovieUncheckedUpdateManyInput>
    /**
     * Filter which Movies to update
     */
    where?: MovieWhereInput
  }

  /**
   * Movie upsert
   */
  export type MovieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * The filter to search for the Movie to update in case it exists.
     */
    where: MovieWhereUniqueInput
    /**
     * In case the Movie found by the `where` argument doesn't exist, create a new Movie with this data.
     */
    create: XOR<MovieCreateInput, MovieUncheckedCreateInput>
    /**
     * In case the Movie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieUpdateInput, MovieUncheckedUpdateInput>
  }

  /**
   * Movie delete
   */
  export type MovieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Filter which Movie to delete.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie deleteMany
   */
  export type MovieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to delete
     */
    where?: MovieWhereInput
  }

  /**
   * Movie without action
   */
  export type MovieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
  }


  /**
   * Model NewData
   */

  export type AggregateNewData = {
    _count: NewDataCountAggregateOutputType | null
    _avg: NewDataAvgAggregateOutputType | null
    _sum: NewDataSumAggregateOutputType | null
    _min: NewDataMinAggregateOutputType | null
    _max: NewDataMaxAggregateOutputType | null
  }

  export type NewDataAvgAggregateOutputType = {
    movieId: number | null
  }

  export type NewDataSumAggregateOutputType = {
    movieId: number | null
  }

  export type NewDataMinAggregateOutputType = {
    movieId: number | null
    title: string | null
    director: string | null
    genre: $Enums.Genre | null
  }

  export type NewDataMaxAggregateOutputType = {
    movieId: number | null
    title: string | null
    director: string | null
    genre: $Enums.Genre | null
  }

  export type NewDataCountAggregateOutputType = {
    movieId: number
    title: number
    director: number
    genre: number
    _all: number
  }


  export type NewDataAvgAggregateInputType = {
    movieId?: true
  }

  export type NewDataSumAggregateInputType = {
    movieId?: true
  }

  export type NewDataMinAggregateInputType = {
    movieId?: true
    title?: true
    director?: true
    genre?: true
  }

  export type NewDataMaxAggregateInputType = {
    movieId?: true
    title?: true
    director?: true
    genre?: true
  }

  export type NewDataCountAggregateInputType = {
    movieId?: true
    title?: true
    director?: true
    genre?: true
    _all?: true
  }

  export type NewDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewData to aggregate.
     */
    where?: NewDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewData to fetch.
     */
    orderBy?: NewDataOrderByWithRelationInput | NewDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewData
    **/
    _count?: true | NewDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewDataMaxAggregateInputType
  }

  export type GetNewDataAggregateType<T extends NewDataAggregateArgs> = {
        [P in keyof T & keyof AggregateNewData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewData[P]>
      : GetScalarType<T[P], AggregateNewData[P]>
  }




  export type NewDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewDataWhereInput
    orderBy?: NewDataOrderByWithAggregationInput | NewDataOrderByWithAggregationInput[]
    by: NewDataScalarFieldEnum[] | NewDataScalarFieldEnum
    having?: NewDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewDataCountAggregateInputType | true
    _avg?: NewDataAvgAggregateInputType
    _sum?: NewDataSumAggregateInputType
    _min?: NewDataMinAggregateInputType
    _max?: NewDataMaxAggregateInputType
  }

  export type NewDataGroupByOutputType = {
    movieId: number
    title: string | null
    director: string | null
    genre: $Enums.Genre | null
    _count: NewDataCountAggregateOutputType | null
    _avg: NewDataAvgAggregateOutputType | null
    _sum: NewDataSumAggregateOutputType | null
    _min: NewDataMinAggregateOutputType | null
    _max: NewDataMaxAggregateOutputType | null
  }

  type GetNewDataGroupByPayload<T extends NewDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewDataGroupByOutputType[P]>
            : GetScalarType<T[P], NewDataGroupByOutputType[P]>
        }
      >
    >


  export type NewDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    movieId?: boolean
    title?: boolean
    director?: boolean
    genre?: boolean
  }, ExtArgs["result"]["newData"]>

  export type NewDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    movieId?: boolean
    title?: boolean
    director?: boolean
    genre?: boolean
  }, ExtArgs["result"]["newData"]>

  export type NewDataSelectScalar = {
    movieId?: boolean
    title?: boolean
    director?: boolean
    genre?: boolean
  }


  export type $NewDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      movieId: number
      title: string | null
      director: string | null
      genre: $Enums.Genre | null
    }, ExtArgs["result"]["newData"]>
    composites: {}
  }

  type NewDataGetPayload<S extends boolean | null | undefined | NewDataDefaultArgs> = $Result.GetResult<Prisma.$NewDataPayload, S>

  type NewDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewDataCountAggregateInputType | true
    }

  export interface NewDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewData'], meta: { name: 'NewData' } }
    /**
     * Find zero or one NewData that matches the filter.
     * @param {NewDataFindUniqueArgs} args - Arguments to find a NewData
     * @example
     * // Get one NewData
     * const newData = await prisma.newData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataFindUniqueArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NewData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewDataFindUniqueOrThrowArgs} args - Arguments to find a NewData
     * @example
     * // Get one NewData
     * const newData = await prisma.newData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NewData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataFindFirstArgs} args - Arguments to find a NewData
     * @example
     * // Get one NewData
     * const newData = await prisma.newData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataFindFirstArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NewData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataFindFirstOrThrowArgs} args - Arguments to find a NewData
     * @example
     * // Get one NewData
     * const newData = await prisma.newData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NewData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewData
     * const newData = await prisma.newData.findMany()
     * 
     * // Get first 10 NewData
     * const newData = await prisma.newData.findMany({ take: 10 })
     * 
     * // Only select the `movieId`
     * const newDataWithMovieIdOnly = await prisma.newData.findMany({ select: { movieId: true } })
     * 
    **/
    findMany<T extends NewDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NewData.
     * @param {NewDataCreateArgs} args - Arguments to create a NewData.
     * @example
     * // Create one NewData
     * const NewData = await prisma.newData.create({
     *   data: {
     *     // ... data to create a NewData
     *   }
     * })
     * 
    **/
    create<T extends NewDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataCreateArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NewData.
     * @param {NewDataCreateManyArgs} args - Arguments to create many NewData.
     * @example
     * // Create many NewData
     * const newData = await prisma.newData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends NewDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NewData and returns the data saved in the database.
     * @param {NewDataCreateManyAndReturnArgs} args - Arguments to create many NewData.
     * @example
     * // Create many NewData
     * const newData = await prisma.newData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NewData and only return the `movieId`
     * const newDataWithMovieIdOnly = await prisma.newData.createManyAndReturn({ 
     *   select: { movieId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends NewDataCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a NewData.
     * @param {NewDataDeleteArgs} args - Arguments to delete one NewData.
     * @example
     * // Delete one NewData
     * const NewData = await prisma.newData.delete({
     *   where: {
     *     // ... filter to delete one NewData
     *   }
     * })
     * 
    **/
    delete<T extends NewDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataDeleteArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NewData.
     * @param {NewDataUpdateArgs} args - Arguments to update one NewData.
     * @example
     * // Update one NewData
     * const newData = await prisma.newData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataUpdateArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NewData.
     * @param {NewDataDeleteManyArgs} args - Arguments to filter NewData to delete.
     * @example
     * // Delete a few NewData
     * const { count } = await prisma.newData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewData
     * const newData = await prisma.newData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewData.
     * @param {NewDataUpsertArgs} args - Arguments to update or create a NewData.
     * @example
     * // Update or create a NewData
     * const newData = await prisma.newData.upsert({
     *   create: {
     *     // ... data to create a NewData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewData we want to update
     *   }
     * })
    **/
    upsert<T extends NewDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NewDataUpsertArgs<ExtArgs>>
    ): Prisma__NewDataClient<$Result.GetResult<Prisma.$NewDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NewData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataCountArgs} args - Arguments to filter NewData to count.
     * @example
     * // Count the number of NewData
     * const count = await prisma.newData.count({
     *   where: {
     *     // ... the filter for the NewData we want to count
     *   }
     * })
    **/
    count<T extends NewDataCountArgs>(
      args?: Subset<T, NewDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewDataAggregateArgs>(args: Subset<T, NewDataAggregateArgs>): Prisma.PrismaPromise<GetNewDataAggregateType<T>>

    /**
     * Group by NewData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewDataGroupByArgs['orderBy'] }
        : { orderBy?: NewDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewData model
   */
  readonly fields: NewDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NewData model
   */ 
  interface NewDataFieldRefs {
    readonly movieId: FieldRef<"NewData", 'Int'>
    readonly title: FieldRef<"NewData", 'String'>
    readonly director: FieldRef<"NewData", 'String'>
    readonly genre: FieldRef<"NewData", 'Genre'>
  }
    

  // Custom InputTypes
  /**
   * NewData findUnique
   */
  export type NewDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter, which NewData to fetch.
     */
    where: NewDataWhereUniqueInput
  }

  /**
   * NewData findUniqueOrThrow
   */
  export type NewDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter, which NewData to fetch.
     */
    where: NewDataWhereUniqueInput
  }

  /**
   * NewData findFirst
   */
  export type NewDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter, which NewData to fetch.
     */
    where?: NewDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewData to fetch.
     */
    orderBy?: NewDataOrderByWithRelationInput | NewDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewData.
     */
    cursor?: NewDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewData.
     */
    distinct?: NewDataScalarFieldEnum | NewDataScalarFieldEnum[]
  }

  /**
   * NewData findFirstOrThrow
   */
  export type NewDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter, which NewData to fetch.
     */
    where?: NewDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewData to fetch.
     */
    orderBy?: NewDataOrderByWithRelationInput | NewDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewData.
     */
    cursor?: NewDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewData.
     */
    distinct?: NewDataScalarFieldEnum | NewDataScalarFieldEnum[]
  }

  /**
   * NewData findMany
   */
  export type NewDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter, which NewData to fetch.
     */
    where?: NewDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewData to fetch.
     */
    orderBy?: NewDataOrderByWithRelationInput | NewDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewData.
     */
    cursor?: NewDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewData.
     */
    skip?: number
    distinct?: NewDataScalarFieldEnum | NewDataScalarFieldEnum[]
  }

  /**
   * NewData create
   */
  export type NewDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * The data needed to create a NewData.
     */
    data?: XOR<NewDataCreateInput, NewDataUncheckedCreateInput>
  }

  /**
   * NewData createMany
   */
  export type NewDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewData.
     */
    data: NewDataCreateManyInput | NewDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewData createManyAndReturn
   */
  export type NewDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NewData.
     */
    data: NewDataCreateManyInput | NewDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewData update
   */
  export type NewDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * The data needed to update a NewData.
     */
    data: XOR<NewDataUpdateInput, NewDataUncheckedUpdateInput>
    /**
     * Choose, which NewData to update.
     */
    where: NewDataWhereUniqueInput
  }

  /**
   * NewData updateMany
   */
  export type NewDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewData.
     */
    data: XOR<NewDataUpdateManyMutationInput, NewDataUncheckedUpdateManyInput>
    /**
     * Filter which NewData to update
     */
    where?: NewDataWhereInput
  }

  /**
   * NewData upsert
   */
  export type NewDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * The filter to search for the NewData to update in case it exists.
     */
    where: NewDataWhereUniqueInput
    /**
     * In case the NewData found by the `where` argument doesn't exist, create a new NewData with this data.
     */
    create: XOR<NewDataCreateInput, NewDataUncheckedCreateInput>
    /**
     * In case the NewData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewDataUpdateInput, NewDataUncheckedUpdateInput>
  }

  /**
   * NewData delete
   */
  export type NewDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
    /**
     * Filter which NewData to delete.
     */
    where: NewDataWhereUniqueInput
  }

  /**
   * NewData deleteMany
   */
  export type NewDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewData to delete
     */
    where?: NewDataWhereInput
  }

  /**
   * NewData without action
   */
  export type NewDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewData
     */
    select?: NewDataSelect<ExtArgs> | null
  }


  /**
   * Model UserRegistration
   */

  export type AggregateUserRegistration = {
    _count: UserRegistrationCountAggregateOutputType | null
    _avg: UserRegistrationAvgAggregateOutputType | null
    _sum: UserRegistrationSumAggregateOutputType | null
    _min: UserRegistrationMinAggregateOutputType | null
    _max: UserRegistrationMaxAggregateOutputType | null
  }

  export type UserRegistrationAvgAggregateOutputType = {
    id: number | null
    role: number | null
  }

  export type UserRegistrationSumAggregateOutputType = {
    id: number | null
    role: number | null
  }

  export type UserRegistrationMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    username: string | null
    password: string | null
    role: number | null
  }

  export type UserRegistrationMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    username: string | null
    password: string | null
    role: number | null
  }

  export type UserRegistrationCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserRegistrationAvgAggregateInputType = {
    id?: true
    role?: true
  }

  export type UserRegistrationSumAggregateInputType = {
    id?: true
    role?: true
  }

  export type UserRegistrationMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserRegistrationMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserRegistrationCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRegistration to aggregate.
     */
    where?: UserRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRegistrations to fetch.
     */
    orderBy?: UserRegistrationOrderByWithRelationInput | UserRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRegistrations
    **/
    _count?: true | UserRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRegistrationMaxAggregateInputType
  }

  export type GetUserRegistrationAggregateType<T extends UserRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRegistration[P]>
      : GetScalarType<T[P], AggregateUserRegistration[P]>
  }




  export type UserRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRegistrationWhereInput
    orderBy?: UserRegistrationOrderByWithAggregationInput | UserRegistrationOrderByWithAggregationInput[]
    by: UserRegistrationScalarFieldEnum[] | UserRegistrationScalarFieldEnum
    having?: UserRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRegistrationCountAggregateInputType | true
    _avg?: UserRegistrationAvgAggregateInputType
    _sum?: UserRegistrationSumAggregateInputType
    _min?: UserRegistrationMinAggregateInputType
    _max?: UserRegistrationMaxAggregateInputType
  }

  export type UserRegistrationGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    username: string
    password: string
    role: number
    _count: UserRegistrationCountAggregateOutputType | null
    _avg: UserRegistrationAvgAggregateOutputType | null
    _sum: UserRegistrationSumAggregateOutputType | null
    _min: UserRegistrationMinAggregateOutputType | null
    _max: UserRegistrationMaxAggregateOutputType | null
  }

  type GetUserRegistrationGroupByPayload<T extends UserRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], UserRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type UserRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["userRegistration"]>

  export type UserRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["userRegistration"]>

  export type UserRegistrationSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }


  export type $UserRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRegistration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstname: string
      lastname: string
      username: string
      password: string
      role: number
    }, ExtArgs["result"]["userRegistration"]>
    composites: {}
  }

  type UserRegistrationGetPayload<S extends boolean | null | undefined | UserRegistrationDefaultArgs> = $Result.GetResult<Prisma.$UserRegistrationPayload, S>

  type UserRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRegistrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRegistrationCountAggregateInputType | true
    }

  export interface UserRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRegistration'], meta: { name: 'UserRegistration' } }
    /**
     * Find zero or one UserRegistration that matches the filter.
     * @param {UserRegistrationFindUniqueArgs} args - Arguments to find a UserRegistration
     * @example
     * // Get one UserRegistration
     * const userRegistration = await prisma.userRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRegistrationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationFindUniqueArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserRegistration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRegistrationFindUniqueOrThrowArgs} args - Arguments to find a UserRegistration
     * @example
     * // Get one UserRegistration
     * const userRegistration = await prisma.userRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRegistrationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationFindFirstArgs} args - Arguments to find a UserRegistration
     * @example
     * // Get one UserRegistration
     * const userRegistration = await prisma.userRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRegistrationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationFindFirstArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationFindFirstOrThrowArgs} args - Arguments to find a UserRegistration
     * @example
     * // Get one UserRegistration
     * const userRegistration = await prisma.userRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRegistrationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRegistrations
     * const userRegistrations = await prisma.userRegistration.findMany()
     * 
     * // Get first 10 UserRegistrations
     * const userRegistrations = await prisma.userRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRegistrationWithIdOnly = await prisma.userRegistration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRegistrationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserRegistration.
     * @param {UserRegistrationCreateArgs} args - Arguments to create a UserRegistration.
     * @example
     * // Create one UserRegistration
     * const UserRegistration = await prisma.userRegistration.create({
     *   data: {
     *     // ... data to create a UserRegistration
     *   }
     * })
     * 
    **/
    create<T extends UserRegistrationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationCreateArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserRegistrations.
     * @param {UserRegistrationCreateManyArgs} args - Arguments to create many UserRegistrations.
     * @example
     * // Create many UserRegistrations
     * const userRegistration = await prisma.userRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserRegistrationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRegistrations and returns the data saved in the database.
     * @param {UserRegistrationCreateManyAndReturnArgs} args - Arguments to create many UserRegistrations.
     * @example
     * // Create many UserRegistrations
     * const userRegistration = await prisma.userRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRegistrations and only return the `id`
     * const userRegistrationWithIdOnly = await prisma.userRegistration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserRegistrationCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a UserRegistration.
     * @param {UserRegistrationDeleteArgs} args - Arguments to delete one UserRegistration.
     * @example
     * // Delete one UserRegistration
     * const UserRegistration = await prisma.userRegistration.delete({
     *   where: {
     *     // ... filter to delete one UserRegistration
     *   }
     * })
     * 
    **/
    delete<T extends UserRegistrationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationDeleteArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserRegistration.
     * @param {UserRegistrationUpdateArgs} args - Arguments to update one UserRegistration.
     * @example
     * // Update one UserRegistration
     * const userRegistration = await prisma.userRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRegistrationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationUpdateArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserRegistrations.
     * @param {UserRegistrationDeleteManyArgs} args - Arguments to filter UserRegistrations to delete.
     * @example
     * // Delete a few UserRegistrations
     * const { count } = await prisma.userRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRegistrationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRegistrationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRegistrations
     * const userRegistration = await prisma.userRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRegistrationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRegistration.
     * @param {UserRegistrationUpsertArgs} args - Arguments to update or create a UserRegistration.
     * @example
     * // Update or create a UserRegistration
     * const userRegistration = await prisma.userRegistration.upsert({
     *   create: {
     *     // ... data to create a UserRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRegistration we want to update
     *   }
     * })
    **/
    upsert<T extends UserRegistrationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserRegistrationUpsertArgs<ExtArgs>>
    ): Prisma__UserRegistrationClient<$Result.GetResult<Prisma.$UserRegistrationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationCountArgs} args - Arguments to filter UserRegistrations to count.
     * @example
     * // Count the number of UserRegistrations
     * const count = await prisma.userRegistration.count({
     *   where: {
     *     // ... the filter for the UserRegistrations we want to count
     *   }
     * })
    **/
    count<T extends UserRegistrationCountArgs>(
      args?: Subset<T, UserRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRegistrationAggregateArgs>(args: Subset<T, UserRegistrationAggregateArgs>): Prisma.PrismaPromise<GetUserRegistrationAggregateType<T>>

    /**
     * Group by UserRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: UserRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRegistration model
   */
  readonly fields: UserRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserRegistration model
   */ 
  interface UserRegistrationFieldRefs {
    readonly id: FieldRef<"UserRegistration", 'Int'>
    readonly firstname: FieldRef<"UserRegistration", 'String'>
    readonly lastname: FieldRef<"UserRegistration", 'String'>
    readonly username: FieldRef<"UserRegistration", 'String'>
    readonly password: FieldRef<"UserRegistration", 'String'>
    readonly role: FieldRef<"UserRegistration", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserRegistration findUnique
   */
  export type UserRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter, which UserRegistration to fetch.
     */
    where: UserRegistrationWhereUniqueInput
  }

  /**
   * UserRegistration findUniqueOrThrow
   */
  export type UserRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter, which UserRegistration to fetch.
     */
    where: UserRegistrationWhereUniqueInput
  }

  /**
   * UserRegistration findFirst
   */
  export type UserRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter, which UserRegistration to fetch.
     */
    where?: UserRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRegistrations to fetch.
     */
    orderBy?: UserRegistrationOrderByWithRelationInput | UserRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRegistrations.
     */
    cursor?: UserRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRegistrations.
     */
    distinct?: UserRegistrationScalarFieldEnum | UserRegistrationScalarFieldEnum[]
  }

  /**
   * UserRegistration findFirstOrThrow
   */
  export type UserRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter, which UserRegistration to fetch.
     */
    where?: UserRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRegistrations to fetch.
     */
    orderBy?: UserRegistrationOrderByWithRelationInput | UserRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRegistrations.
     */
    cursor?: UserRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRegistrations.
     */
    distinct?: UserRegistrationScalarFieldEnum | UserRegistrationScalarFieldEnum[]
  }

  /**
   * UserRegistration findMany
   */
  export type UserRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter, which UserRegistrations to fetch.
     */
    where?: UserRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRegistrations to fetch.
     */
    orderBy?: UserRegistrationOrderByWithRelationInput | UserRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRegistrations.
     */
    cursor?: UserRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRegistrations.
     */
    skip?: number
    distinct?: UserRegistrationScalarFieldEnum | UserRegistrationScalarFieldEnum[]
  }

  /**
   * UserRegistration create
   */
  export type UserRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * The data needed to create a UserRegistration.
     */
    data: XOR<UserRegistrationCreateInput, UserRegistrationUncheckedCreateInput>
  }

  /**
   * UserRegistration createMany
   */
  export type UserRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRegistrations.
     */
    data: UserRegistrationCreateManyInput | UserRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRegistration createManyAndReturn
   */
  export type UserRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRegistrations.
     */
    data: UserRegistrationCreateManyInput | UserRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRegistration update
   */
  export type UserRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * The data needed to update a UserRegistration.
     */
    data: XOR<UserRegistrationUpdateInput, UserRegistrationUncheckedUpdateInput>
    /**
     * Choose, which UserRegistration to update.
     */
    where: UserRegistrationWhereUniqueInput
  }

  /**
   * UserRegistration updateMany
   */
  export type UserRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRegistrations.
     */
    data: XOR<UserRegistrationUpdateManyMutationInput, UserRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which UserRegistrations to update
     */
    where?: UserRegistrationWhereInput
  }

  /**
   * UserRegistration upsert
   */
  export type UserRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * The filter to search for the UserRegistration to update in case it exists.
     */
    where: UserRegistrationWhereUniqueInput
    /**
     * In case the UserRegistration found by the `where` argument doesn't exist, create a new UserRegistration with this data.
     */
    create: XOR<UserRegistrationCreateInput, UserRegistrationUncheckedCreateInput>
    /**
     * In case the UserRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRegistrationUpdateInput, UserRegistrationUncheckedUpdateInput>
  }

  /**
   * UserRegistration delete
   */
  export type UserRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
    /**
     * Filter which UserRegistration to delete.
     */
    where: UserRegistrationWhereUniqueInput
  }

  /**
   * UserRegistration deleteMany
   */
  export type UserRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRegistrations to delete
     */
    where?: UserRegistrationWhereInput
  }

  /**
   * UserRegistration without action
   */
  export type UserRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRegistration
     */
    select?: UserRegistrationSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ButtonStatusScalarFieldEnum: {
    id: 'id',
    status: 'status'
  };

  export type ButtonStatusScalarFieldEnum = (typeof ButtonStatusScalarFieldEnum)[keyof typeof ButtonStatusScalarFieldEnum]


  export const MovieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    director: 'director',
    releaseYear: 'releaseYear',
    runtime: 'runtime',
    genre: 'genre',
    image: 'image',
    rating: 'rating',
    plotSummary: 'plotSummary',
    cast: 'cast'
  };

  export type MovieScalarFieldEnum = (typeof MovieScalarFieldEnum)[keyof typeof MovieScalarFieldEnum]


  export const NewDataScalarFieldEnum: {
    movieId: 'movieId',
    title: 'title',
    director: 'director',
    genre: 'genre'
  };

  export type NewDataScalarFieldEnum = (typeof NewDataScalarFieldEnum)[keyof typeof NewDataScalarFieldEnum]


  export const UserRegistrationScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserRegistrationScalarFieldEnum = (typeof UserRegistrationScalarFieldEnum)[keyof typeof UserRegistrationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Genre'
   */
  export type EnumGenreFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Genre'>
    


  /**
   * Reference to a field of type 'Genre[]'
   */
  export type ListEnumGenreFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Genre[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ButtonStatusWhereInput = {
    AND?: ButtonStatusWhereInput | ButtonStatusWhereInput[]
    OR?: ButtonStatusWhereInput[]
    NOT?: ButtonStatusWhereInput | ButtonStatusWhereInput[]
    id?: IntFilter<"ButtonStatus"> | number
    status?: BoolFilter<"ButtonStatus"> | boolean
  }

  export type ButtonStatusOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ButtonStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ButtonStatusWhereInput | ButtonStatusWhereInput[]
    OR?: ButtonStatusWhereInput[]
    NOT?: ButtonStatusWhereInput | ButtonStatusWhereInput[]
    status?: BoolFilter<"ButtonStatus"> | boolean
  }, "id">

  export type ButtonStatusOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    _count?: ButtonStatusCountOrderByAggregateInput
    _avg?: ButtonStatusAvgOrderByAggregateInput
    _max?: ButtonStatusMaxOrderByAggregateInput
    _min?: ButtonStatusMinOrderByAggregateInput
    _sum?: ButtonStatusSumOrderByAggregateInput
  }

  export type ButtonStatusScalarWhereWithAggregatesInput = {
    AND?: ButtonStatusScalarWhereWithAggregatesInput | ButtonStatusScalarWhereWithAggregatesInput[]
    OR?: ButtonStatusScalarWhereWithAggregatesInput[]
    NOT?: ButtonStatusScalarWhereWithAggregatesInput | ButtonStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ButtonStatus"> | number
    status?: BoolWithAggregatesFilter<"ButtonStatus"> | boolean
  }

  export type MovieWhereInput = {
    AND?: MovieWhereInput | MovieWhereInput[]
    OR?: MovieWhereInput[]
    NOT?: MovieWhereInput | MovieWhereInput[]
    id?: IntFilter<"Movie"> | number
    title?: StringNullableFilter<"Movie"> | string | null
    director?: StringNullableFilter<"Movie"> | string | null
    releaseYear?: IntNullableFilter<"Movie"> | number | null
    runtime?: IntNullableFilter<"Movie"> | number | null
    genre?: EnumGenreNullableFilter<"Movie"> | $Enums.Genre | null
    image?: StringNullableFilter<"Movie"> | string | null
    rating?: FloatNullableFilter<"Movie"> | number | null
    plotSummary?: StringNullableFilter<"Movie"> | string | null
    cast?: StringNullableFilter<"Movie"> | string | null
  }

  export type MovieOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    director?: SortOrderInput | SortOrder
    releaseYear?: SortOrderInput | SortOrder
    runtime?: SortOrderInput | SortOrder
    genre?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    plotSummary?: SortOrderInput | SortOrder
    cast?: SortOrderInput | SortOrder
  }

  export type MovieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MovieWhereInput | MovieWhereInput[]
    OR?: MovieWhereInput[]
    NOT?: MovieWhereInput | MovieWhereInput[]
    title?: StringNullableFilter<"Movie"> | string | null
    director?: StringNullableFilter<"Movie"> | string | null
    releaseYear?: IntNullableFilter<"Movie"> | number | null
    runtime?: IntNullableFilter<"Movie"> | number | null
    genre?: EnumGenreNullableFilter<"Movie"> | $Enums.Genre | null
    image?: StringNullableFilter<"Movie"> | string | null
    rating?: FloatNullableFilter<"Movie"> | number | null
    plotSummary?: StringNullableFilter<"Movie"> | string | null
    cast?: StringNullableFilter<"Movie"> | string | null
  }, "id">

  export type MovieOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    director?: SortOrderInput | SortOrder
    releaseYear?: SortOrderInput | SortOrder
    runtime?: SortOrderInput | SortOrder
    genre?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    plotSummary?: SortOrderInput | SortOrder
    cast?: SortOrderInput | SortOrder
    _count?: MovieCountOrderByAggregateInput
    _avg?: MovieAvgOrderByAggregateInput
    _max?: MovieMaxOrderByAggregateInput
    _min?: MovieMinOrderByAggregateInput
    _sum?: MovieSumOrderByAggregateInput
  }

  export type MovieScalarWhereWithAggregatesInput = {
    AND?: MovieScalarWhereWithAggregatesInput | MovieScalarWhereWithAggregatesInput[]
    OR?: MovieScalarWhereWithAggregatesInput[]
    NOT?: MovieScalarWhereWithAggregatesInput | MovieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Movie"> | number
    title?: StringNullableWithAggregatesFilter<"Movie"> | string | null
    director?: StringNullableWithAggregatesFilter<"Movie"> | string | null
    releaseYear?: IntNullableWithAggregatesFilter<"Movie"> | number | null
    runtime?: IntNullableWithAggregatesFilter<"Movie"> | number | null
    genre?: EnumGenreNullableWithAggregatesFilter<"Movie"> | $Enums.Genre | null
    image?: StringNullableWithAggregatesFilter<"Movie"> | string | null
    rating?: FloatNullableWithAggregatesFilter<"Movie"> | number | null
    plotSummary?: StringNullableWithAggregatesFilter<"Movie"> | string | null
    cast?: StringNullableWithAggregatesFilter<"Movie"> | string | null
  }

  export type NewDataWhereInput = {
    AND?: NewDataWhereInput | NewDataWhereInput[]
    OR?: NewDataWhereInput[]
    NOT?: NewDataWhereInput | NewDataWhereInput[]
    movieId?: IntFilter<"NewData"> | number
    title?: StringNullableFilter<"NewData"> | string | null
    director?: StringNullableFilter<"NewData"> | string | null
    genre?: EnumGenreNullableFilter<"NewData"> | $Enums.Genre | null
  }

  export type NewDataOrderByWithRelationInput = {
    movieId?: SortOrder
    title?: SortOrderInput | SortOrder
    director?: SortOrderInput | SortOrder
    genre?: SortOrderInput | SortOrder
  }

  export type NewDataWhereUniqueInput = Prisma.AtLeast<{
    movieId?: number
    AND?: NewDataWhereInput | NewDataWhereInput[]
    OR?: NewDataWhereInput[]
    NOT?: NewDataWhereInput | NewDataWhereInput[]
    title?: StringNullableFilter<"NewData"> | string | null
    director?: StringNullableFilter<"NewData"> | string | null
    genre?: EnumGenreNullableFilter<"NewData"> | $Enums.Genre | null
  }, "movieId">

  export type NewDataOrderByWithAggregationInput = {
    movieId?: SortOrder
    title?: SortOrderInput | SortOrder
    director?: SortOrderInput | SortOrder
    genre?: SortOrderInput | SortOrder
    _count?: NewDataCountOrderByAggregateInput
    _avg?: NewDataAvgOrderByAggregateInput
    _max?: NewDataMaxOrderByAggregateInput
    _min?: NewDataMinOrderByAggregateInput
    _sum?: NewDataSumOrderByAggregateInput
  }

  export type NewDataScalarWhereWithAggregatesInput = {
    AND?: NewDataScalarWhereWithAggregatesInput | NewDataScalarWhereWithAggregatesInput[]
    OR?: NewDataScalarWhereWithAggregatesInput[]
    NOT?: NewDataScalarWhereWithAggregatesInput | NewDataScalarWhereWithAggregatesInput[]
    movieId?: IntWithAggregatesFilter<"NewData"> | number
    title?: StringNullableWithAggregatesFilter<"NewData"> | string | null
    director?: StringNullableWithAggregatesFilter<"NewData"> | string | null
    genre?: EnumGenreNullableWithAggregatesFilter<"NewData"> | $Enums.Genre | null
  }

  export type UserRegistrationWhereInput = {
    AND?: UserRegistrationWhereInput | UserRegistrationWhereInput[]
    OR?: UserRegistrationWhereInput[]
    NOT?: UserRegistrationWhereInput | UserRegistrationWhereInput[]
    id?: IntFilter<"UserRegistration"> | number
    firstname?: StringFilter<"UserRegistration"> | string
    lastname?: StringFilter<"UserRegistration"> | string
    username?: StringFilter<"UserRegistration"> | string
    password?: StringFilter<"UserRegistration"> | string
    role?: IntFilter<"UserRegistration"> | number
  }

  export type UserRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserRegistrationWhereInput | UserRegistrationWhereInput[]
    OR?: UserRegistrationWhereInput[]
    NOT?: UserRegistrationWhereInput | UserRegistrationWhereInput[]
    firstname?: StringFilter<"UserRegistration"> | string
    lastname?: StringFilter<"UserRegistration"> | string
    password?: StringFilter<"UserRegistration"> | string
    role?: IntFilter<"UserRegistration"> | number
  }, "id" | "username">

  export type UserRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserRegistrationCountOrderByAggregateInput
    _avg?: UserRegistrationAvgOrderByAggregateInput
    _max?: UserRegistrationMaxOrderByAggregateInput
    _min?: UserRegistrationMinOrderByAggregateInput
    _sum?: UserRegistrationSumOrderByAggregateInput
  }

  export type UserRegistrationScalarWhereWithAggregatesInput = {
    AND?: UserRegistrationScalarWhereWithAggregatesInput | UserRegistrationScalarWhereWithAggregatesInput[]
    OR?: UserRegistrationScalarWhereWithAggregatesInput[]
    NOT?: UserRegistrationScalarWhereWithAggregatesInput | UserRegistrationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserRegistration"> | number
    firstname?: StringWithAggregatesFilter<"UserRegistration"> | string
    lastname?: StringWithAggregatesFilter<"UserRegistration"> | string
    username?: StringWithAggregatesFilter<"UserRegistration"> | string
    password?: StringWithAggregatesFilter<"UserRegistration"> | string
    role?: IntWithAggregatesFilter<"UserRegistration"> | number
  }

  export type ButtonStatusCreateInput = {
    status?: boolean
  }

  export type ButtonStatusUncheckedCreateInput = {
    id?: number
    status?: boolean
  }

  export type ButtonStatusUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ButtonStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ButtonStatusCreateManyInput = {
    id?: number
    status?: boolean
  }

  export type ButtonStatusUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ButtonStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MovieCreateInput = {
    title?: string | null
    director?: string | null
    releaseYear?: number | null
    runtime?: number | null
    genre?: $Enums.Genre | null
    image?: string | null
    rating?: number | null
    plotSummary?: string | null
    cast?: string | null
  }

  export type MovieUncheckedCreateInput = {
    id?: number
    title?: string | null
    director?: string | null
    releaseYear?: number | null
    runtime?: number | null
    genre?: $Enums.Genre | null
    image?: string | null
    rating?: number | null
    plotSummary?: string | null
    cast?: string | null
  }

  export type MovieUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    releaseYear?: NullableIntFieldUpdateOperationsInput | number | null
    runtime?: NullableIntFieldUpdateOperationsInput | number | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    plotSummary?: NullableStringFieldUpdateOperationsInput | string | null
    cast?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MovieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    releaseYear?: NullableIntFieldUpdateOperationsInput | number | null
    runtime?: NullableIntFieldUpdateOperationsInput | number | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    plotSummary?: NullableStringFieldUpdateOperationsInput | string | null
    cast?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MovieCreateManyInput = {
    id?: number
    title?: string | null
    director?: string | null
    releaseYear?: number | null
    runtime?: number | null
    genre?: $Enums.Genre | null
    image?: string | null
    rating?: number | null
    plotSummary?: string | null
    cast?: string | null
  }

  export type MovieUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    releaseYear?: NullableIntFieldUpdateOperationsInput | number | null
    runtime?: NullableIntFieldUpdateOperationsInput | number | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    plotSummary?: NullableStringFieldUpdateOperationsInput | string | null
    cast?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MovieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    releaseYear?: NullableIntFieldUpdateOperationsInput | number | null
    runtime?: NullableIntFieldUpdateOperationsInput | number | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    plotSummary?: NullableStringFieldUpdateOperationsInput | string | null
    cast?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewDataCreateInput = {
    title?: string | null
    director?: string | null
    genre?: $Enums.Genre | null
  }

  export type NewDataUncheckedCreateInput = {
    movieId?: number
    title?: string | null
    director?: string | null
    genre?: $Enums.Genre | null
  }

  export type NewDataUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
  }

  export type NewDataUncheckedUpdateInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
  }

  export type NewDataCreateManyInput = {
    movieId?: number
    title?: string | null
    director?: string | null
    genre?: $Enums.Genre | null
  }

  export type NewDataUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
  }

  export type NewDataUncheckedUpdateManyInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    director?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: NullableEnumGenreFieldUpdateOperationsInput | $Enums.Genre | null
  }

  export type UserRegistrationCreateInput = {
    firstname: string
    lastname: string
    username: string
    password: string
    role?: number
  }

  export type UserRegistrationUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    username: string
    password: string
    role?: number
  }

  export type UserRegistrationUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type UserRegistrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type UserRegistrationCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
    username: string
    password: string
    role?: number
  }

  export type UserRegistrationUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type UserRegistrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ButtonStatusCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ButtonStatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ButtonStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ButtonStatusMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ButtonStatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumGenreNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Genre | EnumGenreFieldRefInput<$PrismaModel> | null
    in?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenreNullableFilter<$PrismaModel> | $Enums.Genre | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MovieCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    director?: SortOrder
    releaseYear?: SortOrder
    runtime?: SortOrder
    genre?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    plotSummary?: SortOrder
    cast?: SortOrder
  }

  export type MovieAvgOrderByAggregateInput = {
    id?: SortOrder
    releaseYear?: SortOrder
    runtime?: SortOrder
    rating?: SortOrder
  }

  export type MovieMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    director?: SortOrder
    releaseYear?: SortOrder
    runtime?: SortOrder
    genre?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    plotSummary?: SortOrder
    cast?: SortOrder
  }

  export type MovieMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    director?: SortOrder
    releaseYear?: SortOrder
    runtime?: SortOrder
    genre?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    plotSummary?: SortOrder
    cast?: SortOrder
  }

  export type MovieSumOrderByAggregateInput = {
    id?: SortOrder
    releaseYear?: SortOrder
    runtime?: SortOrder
    rating?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumGenreNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Genre | EnumGenreFieldRefInput<$PrismaModel> | null
    in?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenreNullableWithAggregatesFilter<$PrismaModel> | $Enums.Genre | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenreNullableFilter<$PrismaModel>
    _max?: NestedEnumGenreNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NewDataCountOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    director?: SortOrder
    genre?: SortOrder
  }

  export type NewDataAvgOrderByAggregateInput = {
    movieId?: SortOrder
  }

  export type NewDataMaxOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    director?: SortOrder
    genre?: SortOrder
  }

  export type NewDataMinOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    director?: SortOrder
    genre?: SortOrder
  }

  export type NewDataSumOrderByAggregateInput = {
    movieId?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserRegistrationAvgOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type UserRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserRegistrationSumOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumGenreFieldUpdateOperationsInput = {
    set?: $Enums.Genre | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenreNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Genre | EnumGenreFieldRefInput<$PrismaModel> | null
    in?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenreNullableFilter<$PrismaModel> | $Enums.Genre | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenreNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Genre | EnumGenreFieldRefInput<$PrismaModel> | null
    in?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Genre[] | ListEnumGenreFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenreNullableWithAggregatesFilter<$PrismaModel> | $Enums.Genre | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenreNullableFilter<$PrismaModel>
    _max?: NestedEnumGenreNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ButtonStatusDefaultArgs instead
     */
    export type ButtonStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ButtonStatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieDefaultArgs instead
     */
    export type MovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewDataDefaultArgs instead
     */
    export type NewDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRegistrationDefaultArgs instead
     */
    export type UserRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRegistrationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}